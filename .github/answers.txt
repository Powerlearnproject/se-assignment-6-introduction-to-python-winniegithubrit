Introduction to Python
1. Python Basics
What is Python, and what are some of its key features that make it popular among developers? Provide examples of use cases where Python is particularly effective.

Python is a high-level, interpreted programming language known for its simplicity and readability. Key features include:

Easy to Read and Write: Python's syntax is straightforward, making it easier to learn and use.
Interpreted Language: Python code is executed line-by-line, which simplifies debugging.
Dynamic Typing: Python handles data types dynamically, reducing the need for explicit declarations.
Extensive Standard Library: Python comes with a vast standard library that supports many tasks such as file I/O, system calls, and even web development.
Cross-Platform: Python runs on various platforms, including Windows, macOS, and Linux.
Support for Multiple Paradigms: Python supports procedural, object-oriented, and functional programming styles.
Use Cases:

Web Development: Using frameworks like Django and Flask.
Data Science and Machine Learning: With libraries like Pandas, NumPy, and TensorFlow.
Automation and Scripting: Automating repetitive tasks with scripts.
Software Development: Building desktop applications with libraries like Tkinter and PyQt.
Artificial Intelligence: Developing AI models using PyTorch and Keras.
2. Installing Python
Describe the steps to install Python on your operating system (Windows, macOS, or Linux). Include how to verify the installation and set up a virtual environment.
LINUX PYTHON INSTALLATION:

Install Python:

sudo apt update
sudo apt install python3
Verify Installation:


python3 --version
Set up a Virtual Environment:


sudo apt install python3-venv
python3 -m venv myenv
source myenv/bin/activate

3. Python Syntax and Semantics
Write a simple Python program that prints "Hello, World!" to the console. Explain the basic syntax elements used in the program.


print("Hello, World!")
print: This is a built-in function that outputs text to the console.
"Hello, World!": This is a string, a sequence of characters enclosed in quotation marks.

4. Data Types and Variables
List and describe the basic data types in Python. Write a short script that demonstrates how to create and use variables of different data types.

Basic Data Types:

int: Integer numbers (e.g., 5, -3)
float: Floating-point numbers (e.g., 3.14, -2.5)
str: String (e.g., "Hello", 'World')
bool: Boolean values (True, False)
list: Ordered, mutable collection (e.g., [1, 2, 3])
dict: Unordered, mutable collection of key-value pairs (e.g., {"a": 1, "b": 2})
tuple: Ordered, immutable collection (e.g., (1, 2, 3))
set: Unordered collection of unique elements (e.g., {1, 2, 3})
Script:


# Integer
age = 25
print(age)

# Float
height = 5.9
print(height)

# String
name = "Alice"
print(name)

# Boolean
is_student = True
print(is_student)

# List
numbers = [1, 2, 3, 4, 5]
print(numbers)

# Dictionary
person = {"name": "Alice", "age": 25}
print(person)

# Tuple
coordinates = (10.0, 20.0)
print(coordinates)

# Set
unique_numbers = {1, 2, 3, 4, 5}
print(unique_numbers)

5. Control Structures
Explain the use of conditional statements and loops in Python. Provide examples of an if-else statement and a for loop.

Conditional Statements: Used to execute code blocks based on certain conditions.

Example of if-else Statement:


age = 20
if age >= 18:
    print("You are an adult.")
else:
    print("You are a minor.")
Loops: Used to execute a block of code repeatedly.

Example of a for Loop:


# For loop
for i in range(5):
    print(i)
6. Functions in Python
What are functions in Python, and why are they useful? Write a Python function that takes two arguments and returns their sum. Include an example of how to call this function.

Functions are reusable blocks of code that perform a specific task. They help in breaking down complex problems into simpler parts, promote code reuse, and improve readability.

Example Function:


def add_numbers(a, b):
    return a + b

# Calling the function
result = add_numbers(5, 3)
print(result)  # Output: 8
7. Lists and Dictionaries
Describe the differences between lists and dictionaries in Python. Write a script that creates a list of numbers and a dictionary with some key-value pairs, then demonstrates basic operations on both.

Lists are ordered collections of items, which are accessed by their position (index).
Dictionaries are unordered collections of key-value pairs, which are accessed by key.


# List
numbers = [1, 2, 3, 4, 5]
numbers.append(6)
print(numbers)  # Output: [1, 2, 3, 4, 5, 6]

# Dictionary
person = {"name": "Alice", "age": 25}
person["city"] = "New York"
print(person)  # Output: {'name': 'Alice', 'age': 25, 'city': 'New York'}
8. Exception Handling
What is exception handling in Python? Provide an example of how to use try, except, and finally blocks to handle errors in a Python script.

Exception handling in Python allows you to manage errors gracefully without crashing the program. It uses try, except, and finally blocks to handle and clean up after errors.

Example:


try:
    result = 10 / 0
except ZeroDivisionError as e:
    print("Error:", e)
finally:
    print("This block is always executed.")
9. Modules and Packages
Explain the concepts of modules and packages in Python. How can you import and use a module in your script? Provide an example using the math module.

Modules are Python files containing a set of functions, classes, or variables. Packages are collections of modules organized in directories.

Importing and Using a Module:


import math

# Using a function from the math module
result = math.sqrt(16)
print(result)  # Output: 4.0
10. File I/O
How do you read from and write to files in Python? Write a script that reads the content of a file and prints it to the console, and another script that writes a list of strings to a file.

Reading from a File:


with open('example.txt', 'r') as file:
    content = file.read()
    print(content)
Writing to a File:


lines = ["Hello, World!", "Python is great.", "File I/O is easy."]
with open('output.txt', 'w') as file:
    for line in lines:
        file.write(line + '\n')